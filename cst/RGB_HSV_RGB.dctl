__DEVICE__ float3 RGBtoHSV(float3 RGB){
     float3 HSV; 
     float max = _fmaxf(RGB.x, _fmaxf(RGB.y, RGB.z)); 
     float min = _fminf(RGB.x, _fminf(RGB.y, RGB.z)); 
     float d = max - min;
     HSV.x = 0.0;
     HSV.y = max == 0.0 ? 0.0 : d / max;
     HSV.z = max;

     if (d == 0.0) {
          HSV.x = 0.0; 
     }
     else {
          if (max == RGB.x)
               HSV.x = (RGB.y - RGB.z) / d + (RGB.y < RGB.z ? 6.0 : 0.0);
          else if (max == RGB.y)
               HSV.x = (RGB.z - RGB.x) / d + 2.0;
          else
               HSV.x = (RGB.x - RGB.y) / d + 4.0;
          HSV.x /= 6.0;
     }
     return HSV;
}

__DEVICE__ float3 HSVtoRGB(float3 HSV) {
     float3 RGB;
     if (HSV.y == 0.0f) {
          RGB.x = RGB.y = RGB.z = HSV.z;
     } else {
          HSV.x *= 6.0f;
          float i = _floorf(HSV.x);
          float f = HSV.x - i;
          i = i >= 0.0f ? _fmod(i, 6.0f) : _fmod(i, 6.0f) + 6.0f;
          float p = HSV.z * (1.0f - HSV.y);
          float q = HSV.z * (1.0f - HSV.y * f);
          float t = HSV.z * (1.0f - HSV.y * (1.0f - f));
          RGB.x = i == 0.0f ? HSV.z : i == 1.0f ? q : i == 2.0f ? p : i == 3.0f ? p : i == 4.0f ? t : HSV.z;
          RGB.y = i == 0.0f ? t : i == 1 ? HSV.z : i == 2.0f ? HSV.z : i == 3.0f ? q : i == 4.0f ? p : p;
          RGB.z = i == 0.0f ? p : i == 1 ? p : i == 2.0f ? t : i == 3.0f ? HSV.z : i == 4.0f ? HSV.z : q;
     }
     return RGB;
}
